74eeff3c00dda3cb5e92278cb3e1b0a76af560a7 Adding tests for HTML()
diff --git a/http_request_test.go b/http_request_test.go
index 8298521..7df31ba 100644
--- a/http_request_test.go
+++ b/http_request_test.go
@@ -2,23 +2,55 @@ package veun_test
 
 import (
 	"context"
+	"fmt"
 	"io/ioutil"
 	"net/http"
 	"net/http/httptest"
 	"testing"
 
 	"github.com/alecthomas/assert/v2"
-	"github.com/stanistan/veun"
+	. "github.com/stanistan/veun"
 )
 
-func TestRequestBasicHandler(t *testing.T) {
-	var handler = veun.RequestHandlerFunc(func(r *http.Request) (veun.AsRenderable, error) {
+var htmlTpl = MustParseTemplate("html", `<html><body>{{ slot "body" }}</body></html>`)
+
+type html struct {
+	Body AsRenderable
+}
+
+func (v html) Renderable(_ context.Context) (Renderable, error) {
+	return View{Tpl: htmlTpl, Slots: Slots{"body": v.Body}}, nil
+}
+
+func HTML(renderable RequestRenderable) http.Handler {
+	return RequestHandlerFunc(func(r *http.Request) (AsRenderable, error) {
+		v, err := renderable.RequestRenderable(r)
+		if err != nil {
+			return nil, err
+		}
+
+		return html{Body: v}, nil
+	})
+}
+
+func TestRequestRequestHandler(t *testing.T) {
+	var empty = RequestRenderableFunc(func(r *http.Request) (AsRenderable, error) {
 		return nil, nil
 	})
 
 	mux := http.NewServeMux()
 
-	mux.Handle("/empty", handler)
+	mux.Handle("/empty", RequestHandlerFunc(empty))
+	mux.Handle("/html/empty", HTML(empty))
+
+	mux.Handle("/person", RequestHandlerFunc(func(r *http.Request) (AsRenderable, error) {
+		name := r.URL.Query().Get("name")
+		if name == "" {
+			return nil, fmt.Errorf("missing name")
+		}
+
+		return PersonView(Person{Name: name}), nil
+	}))
 
 	server := httptest.NewServer(mux)
 	defer server.Close()
@@ -52,4 +84,22 @@ func TestRequestBasicHandler(t *testing.T) {
 		assert.Equal(t, "", body)
 		assert.Equal(t, 200, code)
 	})
+
+	t.Run("person renders (name=Stan)", func(t *testing.T) {
+		body, code, _ := sendRequest(t, "/person?name=Stan")
+		assert.Equal(t, "<div>Hi, Stan.</div>", body)
+		assert.Equal(t, 200, code)
+	})
+
+	t.Run("person renders (name=someone)", func(t *testing.T) {
+		body, code, _ := sendRequest(t, "/person?name=someone")
+		assert.Equal(t, "<div>Hi, someone.</div>", body)
+		assert.Equal(t, 200, code)
+	})
+
+	t.Run("/html/empty", func(t *testing.T) {
+		body, code, _ := sendRequest(t, "/html/empty")
+		assert.Equal(t, "<html><body></body></html>", body)
+		assert.Equal(t, 200, code)
+	})
 }
